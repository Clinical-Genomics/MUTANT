// Global default params, used in configs
profiles {
    slurm {
        process.executor = 'slurm'
        process.clusterOptions = { "-A production --qos high" }
        process.time = '1h'
        process.memory = '16 GB'
        process.cpus = 4
        process.errorStrategy = 'retry'
        process.maxRetries = 2
    }
}
process {
    withLabel: largecpu {
        cpus = 6
    }
    withLabel: largemem {
        memory = '48 GB'
    }
    withName: fastqc {
        cpus = 2
    }
    withName: fastqcNanopore {
        cpus = 2
    }
}

// Load base.config by default for all pipelines
includeConfig "$baseDir/conf/base.config"

params {
    // Workflow flags
    outdir = 'results'
    // Boilerplate options
    help = false
    tracedir = "${params.outdir}/pipeline_info"
    // cache option makes it a bit easier to set conda or singularity cacheDir
    cache = "/home/proj/production/mutant/nf-cache/"
    // gff file
    gff = "$baseDir/typing/MN908947.3.gff"
    // SARS-CoV-2 VOC
    yaml = "$baseDir/typing/SARS-CoV-2.types.yaml"
    // Fastq files
    fastqPath = "${params.outdir}/../fastq/*/*fastq.gz"
    // Fastqc output folder
    fastqcOut = "${params.outdir}/fastqc_output/"
}

if ( params.medaka || params.nanopolish ) {
    includeConfig "$baseDir/conf/nanopore.config"
    // Clinical genomics override
    params {
        // Minimum read length for artic guppyplex
        min_length = 150
        // Maximum read length for artic guppyplex
        max_length = 1200
        // Set to an integer to enable normalising in artic minion
        // IF SET TO false THIS WILL USE artic minion DEFAULT (100)
        normalise = 500
        // Use bwa not minimap2? Specify in the command using "--bwa"
        bwa = false
        // Output cram instead of bam files
        outCram = false
        // Ignore barcodes having fewer than this number of reads in total
        minReadsPerBarcode = 100
        // After articGuppyPlex filter out samples with fewer than this number of reads
        minReadsArticGuppyPlex = 10
        // Typing frequency threshold to call aa consequences of variant.
        csqAfThreshold = 0.75
        // Minimum coverage depth to call aa consequences of variant.
        csqDpThreshold = 20
        // Repo to download your primer scheme from
        schemeRepoURL = 'https://github.com/Clinical-Genomics/primer-schemes.git'
        // Directory within schemeRepoURL that contains primer schemes
        schemeDir = 'primer-schemes'
        // Scheme name
        scheme = 'midnight_nanopore'
        // Scheme version
        schemeVersion = 'V1'
    }
}

if ( params.illumina ) {
    includeConfig "$baseDir/conf/illumina.config"
    // Clinical genomics override
    params {
        // Allow reads that don't have primer sequence? Ligation prep = false, nextera = true
        allowNoprimer = true
        // Length of illumina reads to keep after primer trimming
        illuminaKeepLen = 30
        // Sliding window quality threshold for keeping reads after primer trimming (illumina)
        illuminaQualThreshold = 20
        // Mpileup depth for ivar (although undocumented in mpileup, setting to zero removes limit)
        mpileupDepth = 100000
        // iVar frequency threshold for consensus variant (ivar consensus: -t)
        varFreqThreshold = 0.95
        // Minimum coverage depth to call variant (ivar consensus: -m; ivar variants -m)
        varMinDepth = 10
        // iVar frequency threshold to call variant (ivar variants: -t )
        varMinFreqThreshold = 0.03
        // iVar minimum mapQ to call variant (ivar variants: -q)
        varMinVariantQuality = 20
        // Typing frequency threshold to call aa consequences of variant. Set to ivarFreqThreshold for consistency with consensus
        csqAfThreshold = 0.75
        // Minimum coverage depth to call aa consequences of variant. Set to ivarMinDepth for consistency with consensus
        csqDpThreshold = 10
        // Java settings for picard tools. The "-Xmx" setting is useful if running into java memory issues
        picardJavaSettings = "-Xmx10g"
        // Options for picard CollectWgsMetrics
        wgsMetricsOptions = "--COVERAGE_CAP 1000000 --LOCUS_ACCUMULATION_CAP 1000000"
        // Customization of multiQC report
        multiqcOptions = '--cl_config "picard_config: { general_stats_target_coverage: [10,30,50,100] }" --module cutadapt --module fastqc --module ivar --module picard'
        // Repo to download your primer scheme from
        schemeRepoURL = 'https://github.com/artic-network/primer-schemes.git'
        // Directory within schemeRepoURL that contains primer schemes
        schemeDir = 'primer-schemes'
        // Scheme name
        scheme = 'nCoV-2019'
        // Scheme version
        schemeVersion = 'V3'
    }
}

// LESS RELEVANT PARAMETERS TO ALTER FROM THIS POINT ONWARD.

profiles {
    conda {
        if ( params.medaka || params.nanopolish ) {
            process.conda = "$baseDir/environments/nanopore/environment.yml"
        }
        else if (params.illumina) {
            process.conda = "$baseDir/environments/illumina/environment.yml"
        }
        if (params.cache){
            conda.cacheDir = params.cache
        }
        includeConfig "$baseDir/conf/conda.config"
    }
    docker {
        docker.enabled = true
        fixOwnership = true
        runOptions = "-u \$(id -u):\$(id -g)"
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        // Container
        if ( params.medaka || params.nanopolish ) {
            process {
                withName:versions {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:pangoversions {
                    container = "file:///${baseDir}/artic-ncov2019-pangolin.sif"
                }
                withName:fastqcNanopore {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:multiqcNanopore {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:articDownloadScheme {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:articGuppyPlex {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:articMinIONMedaka {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:articRemoveUnmappedReads {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:makeQCCSV {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:writeQCSummaryCSV {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:collateSamples {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:pangolinTyping {
                    container = "file:///${baseDir}/artic-ncov2019-pangolin.sif"
                }
                withName:makeReport {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:nextclade {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:typeVariants {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:mergeTypingCSVs {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:getVariantDefinitions {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:bamToCram {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:pycoqc {
                    container = "file:///${baseDir}/pycoqc.sif"
                }
            }
        }
        else if ( params.illumina ) {
            process {
                withName:articDownloadScheme {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:indexReference {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:versions {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:pangoversions {
                    container = "file:///${baseDir}/artic-ncov2019-pangolin.sif"
                }
                withName:fastqc {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:readTrimming {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:readMapping {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:flagStat {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:trimPrimerSequences {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:depth {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:callConsensusFreebayes {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:annotationVEP {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:callVariants {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:makeConsensus {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:makeQCCSV {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:writeQCSummaryCSV {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:statsCoverage {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:statsInsert {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:statsAlignment {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:multiqc {
                    container = "file:///${baseDir}/artic-ncov2019-nanopore.sif"
                }
                withName:collateSamples {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:pangolinTyping {
                    container = "file:///${baseDir}/artic-ncov2019-pangolin.sif"
                }
                withName:nextclade {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:getVariantDefinitions {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:makeReport {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
                withName:typeVariants {
                    container = "file:///${baseDir}/artic-ncov2019-illumina.sif"
                }
            }
        }
        // Temporary directories
        if (params.cache) {
            singularity.cacheDir = params.cache
            env.NXF_TEMP="${params.cache}"
            env.NXF_SINGULARITY_LOCALCACHEDIR="${params.cache}"
            env.NXF_SINGULARITY_CACHEDIR="${params.cache}"
            env.NXF_SINGULARITY_TMPDIR="${params.cache}"
            env.SINGULARITY_LOCALCACHEDIR="${params.cache}"
            env.SINGULARITY_CACHEDIR="${params.cache}"
            env.SINGULARITY_TMPDIR="${params.cache}"
            env.SINGULARITY_ROOTFS="${params.cache}"
            env.TMPDIR="${params.cache}"
            env.TEMPDIR="${params.cache}"
            }
        }
}
// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace.txt"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag.svg"
}
manifest {
    author = 'Mikrobgruppen'
    description = 'Nextflow for running the Artic ncov2019 pipeline on hasta'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '1.0.0'
}
